{
    "about_me": "HAKKIMDA",
    "technologies_navbar": "TEKNOLOJİLER",
    "contact": "İLETİŞİM",
    "hello_me": "Merhaba, Ben",
    "read_a_blog": "Blog Okumak İstiyorum",
    "about_info": "Merhaba ben Çağlar Evren. Mühendis ve Yazılım Geliştiriciyim. İyi yazılımcılar işlerine tutkuyla yaklaşır, daha iyileri ise paylaşarak.",
    "technologies": "Kullandığım teknolojiler: Html, Css, Sass, Bootstrap, Tailwind Css, Vanilla JavaScript, Vue Js, React Js, Spring Boot ve Git(Version Control).",
    "youtube_info_one": "Eski youtube içerik üreticisi, 'Web Geliştirme Yol Haritası', '14 Vs Code Eklentisi' ve 'Html Dersleri' videoları.",
    "youtube_info_two": "Şuan neden video çekmiyorsun sorularını yanıtlıyor.",
    "youtube_btn": "Youtube Kanalını Gör",
    "contact_form": "İletişim için lütfen aşağıdaki formu doldurunuz.",
    "contact_form_info": "Öncelikle benimle iletişime geçmek istediğiniz için teşekkür ederim. En geç 24 saat içinde size dönüş sağlayacağım. Sizlerle iletişime geçmek yaptığım işin en sevdiğim yanlarından biri. Çünkü sizin öneri, problem veya iş birliği istekleriniz sayesinde yeni tecrübeler edinebilirim.",
    "contact_form_name_surname": "Ad Soyad",
    "contact_form_name_placeholder": "Adınızı ve soyadınızı giriniz.",
    "contact_form_email_placeholder": "Email adresinizi giriniz.",
    "contact_form_message": "Mesajınız",
    "contact_form_message_placeholder": "Mesajınızı giriniz...",
    "contact_form_message_success": "Mesajınız başarılı bir şekilde iletilmiştir.",
    "contact_form_send_message": "Mesaj Gönder",
    "contact_form_name_validation": "Lütfen adınızı ve soyadınızı giriniz.",
    "go_up": "Yukarı Çık",
    "page_not_found": "Aradığın sayfaya şu an ulaşılamıyor.",
    "back_to_home": "Anasayfaya Dön",
    "blog_info": "Yayınladığım tüm yazılara buradan ulaşabilirsiniz",
    "show_all_blog_posts": "Tüm Blog Yazılarını Gör",
    "center_text_card_info": "Css ile Elementleri Ortalamak",
    "center_text_image_alt": "Css Element Ortalama",
    "center_text_card_info_second": "Bu blog yazısında Web Geliştirmede sıklıkla kullandığımız, Css ile elementleri nasıl ortalayacağımıza bakacağız.",
    "center_text_card_date": "20 Kasım - 7dk okuma",
    "center_text_blog_title": "Css ile elementleri ortalamak, web geliştirmede en çok kullanılan özelliklerden biridir.",
    "center_text_blog_desc": "Bu blog yazısında size, elementleri yatay, dikey ve hem yatay hem de dikey nasıl ortalayacağınızı göstereceğim.",
    "center_text_opening": "Elementleri Yatay Olarak Ortalamak",
    "center_text_opening_desc": "İlk olarak en kolay olanla başlamak istiyorum. Hadi bir metnin nasıl ortalanacağına bakalım.",
    "center_text_align_title": "Bir metni yatay olarak nasıl ortalarız",
    "center_text_align": "Bir metni ortalamak için “text-align: center” özelliğini kullanırız.",
    "center_text_margin_auto": "Bir Div'i Margin Auto Kullanarak, Yatay Olarak Nasıl Ortalarız",
    "center_text_margin_auto_desc": "Bir div'i sayfada yatay olarak ortalamak için, parent(kapsayan) element'e genişlik(width) ve child element'e(kapsanan) margin: auto vermeniz yeterli olacaktır.",
    "center_text_horizontally_flexbox": "Flexbox ile Bir Div'i, Yatay Olarak Nasıl Ortalarız",
    "center_text_horizontally_flexbox_desc": "Bu yöntem benim en sevdiğim ve her zaman kullandığım bir yöntem. Flexbox, web geliştirmede bir şeyleri ortalamanın en modern yoludur. Tüm modern tarayıcılar flexbox özelliğini destekler. İnsanlar flexbox'ın anlaşılmasının zor olduğunu düşünüyor. Fakat biraz çalışmayla çok basit ve kullanışlı olduğunu görebilirsiniz.",
    "center_text_vertically": "Elementleri Dikey Olarak Ortalamak",
    "center_text_vertically_desc": "Şimdi elementleri dikey olarak nasıl ortalayacağımıza bakalım. Bunun için flexbox kullanıyoruz. Flexbox dışında position: absolute ve transform: translate yöntemlerini kullanabilirsiniz (ki buna bu yazıda değinmeyeceğim) ancak bu sadece zahmetli bir yöntemdir. Şimdi Flexbox kullanarak sadece iki satır kod ile yapacağız.",
    "center_element_vertically_horizontally": "Bir Elementi Hem Dikey Hem de Yatay Nasıl Ortalarız",
    "center_element_ver_hor_transform": "Bir Elementi Hem Dikey Hem de Yatay Transform translate Özelliğini Kullanarak Ortalamak",
    "center_element_ver_hor_transform_desc": "İlk olarak, parent(kapsayan) element'in css'ine position: relative yazmalısınız. Ardından child(kapsanan) element'in css'ine position: absolute, top: 50%, left: 50% ve transform: translate(-50%, -50%) yazmalısınız. Bu, elementinizi ortalayacaktır, ancak bunu daha kolay bir yöntemle yapabiliriz.(Bakınız bir aşağıdaki metod)",
    "center_element_ver_hor_flexbox": "Bir Div'i Hem Dikey Hem de Yatay olarak Flexbox ile Ortalamak",
    "center_element_ver_hor_flexbox_desc": "Bu metod, elementleri hem dikey hem de yatay olarak ortalamak için en kolay yöntemdir. Ben de her zaman bu metodu kullanıyorum. Parent(kapsayan) element'e display: flex, align-items: center ve justify-content: center yazıyorsunuz ve istediğiniz element ortalanıyor.",
    "final": "Sonuç",
    "center_element_final": "Şimdilik bu kadar, okuduğunuz için teşekkür ederim. Kafanıza bir şey takılırsa şuan bu yazıyı okuduğunuz web sitesinden, sosyal medyadan veya mail olarak bana ulaşabilirsiniz. Elimden geldiğince yardımcı olmaya çalışırım. May the force be with you.",
    "array_methods_card_title": "Mutlaka Bilmeniz Gereken 5 Javascript Array Metodu",
    "array_methods_card_info": "Bu blog yazısında, hayatınızı çok daha kolaylaştıracak JavaScript Array Metodlarını ele alacağız.",
    "array_methods_card_date": "5 Aralık - 8dk okuma",
    "array_methods_opening": "JavaScript'te array'ler her zaman kullandığımız data tiplerindendir. Bu blog yazısında, hayatınızı kolaylaştıracak JavaScript array metodlarını ele alacağız.",
    "array_methods_forEach": "1) forEach Array Methodu",
    "array_methods_forEach_desc": "ForEach array metodu, bir fonksiyondaki tüm elementleri tek tek kullanarak, bu elementlerle ilgili olarak işlem yapmamızı sağlar.",
    "array_methods_forEach_conc": "Bu method bize her bir meyvelerin(fruits) adını tek tek verir",
    "array_methods_map": "2) map Array Methodu",
    "array_methods_map_desc": "map array metodu, bir fonksiyondaki tüm elementleri tek tek kullanarak, bu elementlerle ilgili orjinal array'imizi değiştirmeden onlarla ilgili işlem yapmamızı sağlar.",
    "array_methods_map_conc": "map array methodu orjinal array'imizi değiştirmez, bu yüzden yeni bir değişken(variable) yaratarak işlemlerimizi bu değişken üzerinden yaptık.",
    "array_methods_filter": "3) filter Array Methodu",
    "array_methods_filter_desc": "Filter array yöntemi, oluşturduğumuz koşula göre yeni bir array oluşturur. Örneğin, farklı array'lerde yalnızca çift ve tek sayılar istiyorsak, filter yöntemi en iyi seçimdir.",
    "array_methods_filter_examp": "Şimdi başka bir örneğe bakalım. Örneğin, sadece 18 yaşından büyük yetişkinleri(adult) istiyoruz.",
    "array_methods_sort": "4) sort Array Method",
    "array_methods_sort_desc": "Adından da anlaşılacağı gibi, sort yöntemi bir array'in öğelerini sıralamamızı sağlar. Örneğin kelimeleri ilk harfine göre sıralamak istersek, bu yöntemle problemsiz bir şekilde sıralayabiliriz. Fakat sayıları sıramak isterseniz dikkatli olmak gerek. Çünkü sort metodu array'deki elementleri, string formatına çevirmektedir.Sayıları sıralamak, genellikle yazılım geliştirici iş görüşmelerinde ve coding challange'larında sıklıkla sorulmaktadır.",
    "array_methods_slice": "5) slice Array Methodu",
    "array_methods_slice_desc": "Slice array methodu, array'imizdeki elementlerin istediğimiz bir bölümünün kopyasını oluşturur. Bu işlemi yaparken orjinal array'de herhangi bir değişiklik olmaz",
    "array_methods_slice_examp": "Diyelim ki 1'den 5'e kadar numbers değişkeni adında bir array'imiz var ve biz bu array'in index'ine göre 2 ve 4 arasındaki elementleri görmek istiyoruz",
    "array_methods_slice_examp_1": "Bildiğiniz gibi JavaScript'te index'leri saymaya 0'dan başlarız. Slice metodunu yazmaya başladığımızda, ilk olarak hangi index'den başlamak istiyorsak onu yazmalıyız. Yukarıdaki örneğimizde bu 1 oluyor. Bundan sonra, son olarak hangi index'i istiyorsak ondan bir fazlasını yazmalıyız, yani 4. Kısacası ilk yazdığımız index'den, son yazdığımıza kadar arada kalanlar dahil oluyor. Bu sebeple biz yukarıda slice(1, 4) yazdık. Böylelikle bu metod bize 2, 3 ve 4 sayılarını verdi.",
    "array_methods_slice_examp_1_1": "Bu metodun en iyi tarafı orjinal array'imiz hiç bir şekilde değişmiyor.",
    "array_methods_slice_examp_2": "Bir başka örnek, eğer array'imizde sadece son 3 elementi istersek slice(-3) yazmamız yeterli olacaktır. İstediğimiz son element sayısına göre tabiki yazdığımız rakam değişecektir.",
    "array_methods_final": "Şimdilik bu kadar, okuduğunuz için teşekkür ederim. Kafanıza bir şey takılırsa şuan bu yazıyı okuduğunuz web sitesinden, sosyal medyadan veya mail olarak bana ulaşabilirsiniz. Elimden geldiğince yardımcı olmaya çalışırım. I love you all 3000."
}
